{"version":3,"file":"Ask-f696b983.js","sources":["../../../frontend/src/pages/ask/Ask.tsx"],"sourcesContent":["import { useContext, useEffect, useRef, useState } from \"react\";\nimport { Checkbox, Panel, DefaultButton, Spinner, TextField, ICheckboxProps, ITextFieldProps } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\n\nimport styles from \"./Ask.module.css\";\n\nimport { askApi, configApi, getSpeechApi, ChatAppResponse, ChatAppRequest, RetrievalMode, VectorFieldOptions, GPT4VInput } from \"../../api\";\nimport { Answer, AnswerError } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { HelpCallout } from \"../../components/HelpCallout\";\nimport { SettingsButton } from \"../../components/SettingsButton/SettingsButton\";\nimport { useLogin, getToken, requireAccessControl, checkLoggedIn } from \"../../authConfig\";\nimport { VectorSettings } from \"../../components/VectorSettings\";\nimport { GPT4VSettings } from \"../../components/GPT4VSettings\";\nimport { toolTipText } from \"../../i18n/tooltips.js\";\nimport { UploadFile } from \"../../components/UploadFile\";\n\nimport { useMsal } from \"@azure/msal-react\";\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\nimport { LoginContext } from \"../../loginContext\";\n\nexport function Component(): JSX.Element {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [promptTemplatePrefix, setPromptTemplatePrefix] = useState<string>(\"\");\n    const [promptTemplateSuffix, setPromptTemplateSuffix] = useState<string>(\"\");\n    const [temperature, setTemperature] = useState<number>(0.3);\n    const [seed, setSeed] = useState<number | null>(null);\n    const [minimumRerankerScore, setMinimumRerankerScore] = useState<number>(0);\n    const [minimumSearchScore, setMinimumSearchScore] = useState<number>(0);\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [question, setQuestion] = useState<string>(\"\");\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding]);\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\n    const [showSemanticRankerOption, setShowSemanticRankerOption] = useState<boolean>(false);\n    const [showVectorOption, setShowVectorOption] = useState<boolean>(false);\n    const [showUserUpload, setShowUserUpload] = useState<boolean>(false);\n    const [showSpeechInput, setShowSpeechInput] = useState<boolean>(false);\n    const [showSpeechOutputBrowser, setShowSpeechOutputBrowser] = useState<boolean>(false);\n    const [showSpeechOutputAzure, setShowSpeechOutputAzure] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n    const [answer, setAnswer] = useState<ChatAppResponse>();\n    const [speechUrl, setSpeechUrl] = useState<string | null>(null);\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const client = useLogin ? useMsal().instance : undefined;\n    const { loggedIn } = useContext(LoginContext);\n\n    const getConfig = async () => {\n        configApi().then(config => {\n            setShowGPT4VOptions(config.showGPT4VOptions);\n            setUseSemanticRanker(config.showSemanticRankerOption);\n            setShowSemanticRankerOption(config.showSemanticRankerOption);\n            setShowVectorOption(config.showVectorOption);\n            if (!config.showVectorOption) {\n                setRetrievalMode(RetrievalMode.Text);\n            }\n            setShowUserUpload(config.showUserUpload);\n            setShowSpeechInput(config.showSpeechInput);\n            setShowSpeechOutputBrowser(config.showSpeechOutputBrowser);\n            setShowSpeechOutputAzure(config.showSpeechOutputAzure);\n        });\n    };\n\n    useEffect(() => {\n        getConfig();\n    }, []);\n\n    useEffect(() => {\n        if (answer && showSpeechOutputAzure) {\n            getSpeechApi(answer.message.content).then(speechUrl => {\n                setSpeechUrl(speechUrl);\n            });\n        }\n    }, [answer]);\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        const token = client ? await getToken(client) : undefined;\n\n        try {\n            const request: ChatAppRequest = {\n                messages: [\n                    {\n                        content: question,\n                        role: \"user\"\n                    }\n                ],\n                context: {\n                    overrides: {\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\n                        prompt_template_prefix: promptTemplatePrefix.length === 0 ? undefined : promptTemplatePrefix,\n                        prompt_template_suffix: promptTemplateSuffix.length === 0 ? undefined : promptTemplateSuffix,\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\n                        top: retrieveCount,\n                        temperature: temperature,\n                        minimum_reranker_score: minimumRerankerScore,\n                        minimum_search_score: minimumSearchScore,\n                        retrieval_mode: retrievalMode,\n                        semantic_ranker: useSemanticRanker,\n                        semantic_captions: useSemanticCaptions,\n                        use_oid_security_filter: useOidSecurityFilter,\n                        use_groups_security_filter: useGroupsSecurityFilter,\n                        vector_fields: vectorFieldList,\n                        use_gpt4v: useGPT4V,\n                        gpt4v_input: gpt4vInput,\n                        ...(seed !== null ? { seed: seed } : {})\n                    }\n                },\n                // AI Chat Protocol: Client must pass on any session state received from the server\n                session_state: answer ? answer.session_state : null\n            };\n            const result = await askApi(request, token);\n            setAnswer(result);\n            setSpeechUrl(null);\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onTemperatureChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setTemperature(parseFloat(newValue || \"0\"));\n    };\n\n    const onSeedChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setSeed(parseInt(newValue || \"\"));\n    };\n\n    const onMinimumSearchScoreChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setMinimumSearchScore(parseFloat(newValue || \"0\"));\n    };\n\n    const onMinimumRerankerScoreChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setMinimumRerankerScore(parseFloat(newValue || \"0\"));\n    };\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticRanker(!!checked);\n    };\n\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticCaptions(!!checked);\n    };\n\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\n        setExcludeCategory(newValue || \"\");\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n        setQuestion(example);\n    };\n\n    const onShowCitation = (citation: string) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs) => {\n        if (activeAnalysisPanelTab === tab) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n    };\n\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseOidSecurityFilter(!!checked);\n    };\n\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseGroupsSecurityFilter(!!checked);\n    };\n\n    // IDs for form labels and their associated callouts\n    const promptTemplateId = useId(\"promptTemplate\");\n    const promptTemplateFieldId = useId(\"promptTemplateField\");\n    const temperatureId = useId(\"temperature\");\n    const temperatureFieldId = useId(\"temperatureField\");\n    const seedId = useId(\"seed\");\n    const seedFieldId = useId(\"seedField\");\n    const searchScoreId = useId(\"searchScore\");\n    const searchScoreFieldId = useId(\"searchScoreField\");\n    const rerankerScoreId = useId(\"rerankerScore\");\n    const rerankerScoreFieldId = useId(\"rerankerScoreField\");\n    const retrieveCountId = useId(\"retrieveCount\");\n    const retrieveCountFieldId = useId(\"retrieveCountField\");\n    const excludeCategoryId = useId(\"excludeCategory\");\n    const excludeCategoryFieldId = useId(\"excludeCategoryField\");\n    const semanticRankerId = useId(\"semanticRanker\");\n    const semanticRankerFieldId = useId(\"semanticRankerField\");\n    const semanticCaptionsId = useId(\"semanticCaptions\");\n    const semanticCaptionsFieldId = useId(\"semanticCaptionsField\");\n    const useOidSecurityFilterId = useId(\"useOidSecurityFilter\");\n    const useOidSecurityFilterFieldId = useId(\"useOidSecurityFilterField\");\n    const useGroupsSecurityFilterId = useId(\"useGroupsSecurityFilter\");\n    const useGroupsSecurityFilterFieldId = useId(\"useGroupsSecurityFilterField\");\n\n    return (\n        <div className={styles.askContainer}>\n            <div className={styles.askTopSection}>\n                <div className={styles.commandsContainer}>\n                    {showUserUpload && <UploadFile className={styles.commandButton} disabled={loggedIn} />}\n                    <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n                </div>\n                <h1 className={styles.askTitle}>Ask your data</h1>\n                <div className={styles.askQuestionInput}>\n                    <QuestionInput\n                        placeholder=\"Example: Does my plan cover annual eye exams?\"\n                        disabled={isLoading}\n                        initQuestion={question}\n                        onSend={question => makeApiRequest(question)}\n                        showSpeechInput={showSpeechInput}\n                    />\n                </div>\n            </div>\n            <div className={styles.askBottomSection}>\n                {isLoading && <Spinner label=\"Generating answer\" />}\n                {!lastQuestionRef.current && <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />}\n                {!isLoading && answer && !error && (\n                    <div className={styles.askAnswerContainer}>\n                        <Answer\n                            answer={answer}\n                            isStreaming={false}\n                            onCitationClicked={x => onShowCitation(x)}\n                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab)}\n                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab)}\n                            showSpeechOutputAzure={showSpeechOutputAzure}\n                            showSpeechOutputBrowser={showSpeechOutputBrowser}\n                            speechUrl={speechUrl}\n                        />\n                    </div>\n                )}\n                {error ? (\n                    <div className={styles.askAnswerContainer}>\n                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                    </div>\n                ) : null}\n                {activeAnalysisPanelTab && answer && (\n                    <AnalysisPanel\n                        className={styles.askAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x)}\n                        citationHeight=\"600px\"\n                        answer={answer}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n            </div>\n\n            <Panel\n                headerText=\"Configure answer generation\"\n                isOpen={isConfigPanelOpen}\n                isBlocking={false}\n                onDismiss={() => setIsConfigPanelOpen(false)}\n                closeButtonAriaLabel=\"Close\"\n                onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\n                isFooterAtBottom={true}\n            >\n                <TextField\n                    id={promptTemplateFieldId}\n                    className={styles.chatSettingsSeparator}\n                    defaultValue={promptTemplate}\n                    label=\"Override prompt template\"\n                    multiline\n                    autoAdjustHeight\n                    onChange={onPromptTemplateChange}\n                    aria-labelledby={promptTemplateId}\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\n                        <HelpCallout labelId={promptTemplateId} fieldId={promptTemplateFieldId} helpText={toolTipText.promptTemplate} label={props?.label} />\n                    )}\n                />\n\n                <TextField\n                    id={temperatureFieldId}\n                    className={styles.chatSettingsSeparator}\n                    label=\"Temperature\"\n                    type=\"number\"\n                    min={0}\n                    max={1}\n                    step={0.1}\n                    defaultValue={temperature.toString()}\n                    onChange={onTemperatureChange}\n                    aria-labelledby={temperatureId}\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\n                        <HelpCallout labelId={temperatureId} fieldId={temperatureFieldId} helpText={toolTipText.temperature} label={props?.label} />\n                    )}\n                />\n\n                <TextField\n                    id={seedFieldId}\n                    className={styles.chatSettingsSeparator}\n                    label=\"Seed\"\n                    type=\"text\"\n                    defaultValue={seed?.toString() || \"\"}\n                    onChange={onSeedChange}\n                    aria-labelledby={seedId}\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\n                        <HelpCallout labelId={seedId} fieldId={seedFieldId} helpText={toolTipText.seed} label={props?.label} />\n                    )}\n                />\n\n                <TextField\n                    id={searchScoreFieldId}\n                    className={styles.chatSettingsSeparator}\n                    label=\"Minimum search score\"\n                    type=\"number\"\n                    min={0}\n                    step={0.01}\n                    defaultValue={minimumSearchScore.toString()}\n                    onChange={onMinimumSearchScoreChange}\n                    aria-labelledby={searchScoreId}\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\n                        <HelpCallout labelId={searchScoreId} fieldId={searchScoreFieldId} helpText={toolTipText.searchScore} label={props?.label} />\n                    )}\n                />\n\n                {showSemanticRankerOption && (\n                    <TextField\n                        id={rerankerScoreFieldId}\n                        className={styles.chatSettingsSeparator}\n                        label=\"Minimum reranker score\"\n                        type=\"number\"\n                        min={1}\n                        max={4}\n                        step={0.1}\n                        defaultValue={minimumRerankerScore.toString()}\n                        onChange={onMinimumRerankerScoreChange}\n                        aria-labelledby={rerankerScoreId}\n                        onRenderLabel={(props: ITextFieldProps | undefined) => (\n                            <HelpCallout labelId={rerankerScoreId} fieldId={rerankerScoreFieldId} helpText={toolTipText.rerankerScore} label={props?.label} />\n                        )}\n                    />\n                )}\n\n                <TextField\n                    id={retrieveCountFieldId}\n                    className={styles.chatSettingsSeparator}\n                    label=\"Retrieve this many search results:\"\n                    type=\"number\"\n                    min={1}\n                    max={50}\n                    defaultValue={retrieveCount.toString()}\n                    onChange={onRetrieveCountChange}\n                    aria-labelledby={retrieveCountId}\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\n                        <HelpCallout labelId={retrieveCountId} fieldId={retrieveCountFieldId} helpText={toolTipText.retrieveNumber} label={props?.label} />\n                    )}\n                />\n\n                <TextField\n                    id={excludeCategoryFieldId}\n                    className={styles.chatSettingsSeparator}\n                    label=\"Exclude category\"\n                    defaultValue={excludeCategory}\n                    onChange={onExcludeCategoryChanged}\n                    aria-labelledby={excludeCategoryId}\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\n                        <HelpCallout labelId={excludeCategoryId} fieldId={excludeCategoryFieldId} helpText={toolTipText.excludeCategory} label={props?.label} />\n                    )}\n                />\n\n                {showSemanticRankerOption && (\n                    <>\n                        <Checkbox\n                            id={semanticRankerFieldId}\n                            className={styles.chatSettingsSeparator}\n                            checked={useSemanticRanker}\n                            label=\"Use semantic ranker for retrieval\"\n                            onChange={onUseSemanticRankerChange}\n                            aria-labelledby={semanticRankerId}\n                            onRenderLabel={(props: ICheckboxProps | undefined) => (\n                                <HelpCallout\n                                    labelId={semanticRankerId}\n                                    fieldId={semanticRankerFieldId}\n                                    helpText={toolTipText.useSemanticReranker}\n                                    label={props?.label}\n                                />\n                            )}\n                        />\n\n                        <Checkbox\n                            id={semanticCaptionsFieldId}\n                            className={styles.chatSettingsSeparator}\n                            checked={useSemanticCaptions}\n                            label=\"Use semantic captions\"\n                            onChange={onUseSemanticCaptionsChange}\n                            disabled={!useSemanticRanker}\n                            aria-labelledby={semanticCaptionsId}\n                            onRenderLabel={(props: ICheckboxProps | undefined) => (\n                                <HelpCallout\n                                    labelId={semanticCaptionsId}\n                                    fieldId={semanticCaptionsFieldId}\n                                    helpText={toolTipText.useSemanticCaptions}\n                                    label={props?.label}\n                                />\n                            )}\n                        />\n                    </>\n                )}\n\n                {showGPT4VOptions && (\n                    <GPT4VSettings\n                        gpt4vInputs={gpt4vInput}\n                        isUseGPT4V={useGPT4V}\n                        updateUseGPT4V={useGPT4V => {\n                            setUseGPT4V(useGPT4V);\n                        }}\n                        updateGPT4VInputs={inputs => setGPT4VInput(inputs)}\n                    />\n                )}\n\n                {showVectorOption && (\n                    <VectorSettings\n                        defaultRetrievalMode={retrievalMode}\n                        showImageOptions={useGPT4V && showGPT4VOptions}\n                        updateVectorFields={(options: VectorFieldOptions[]) => setVectorFieldList(options)}\n                        updateRetrievalMode={(retrievalMode: RetrievalMode) => setRetrievalMode(retrievalMode)}\n                    />\n                )}\n\n                {useLogin && (\n                    <>\n                        <Checkbox\n                            id={useOidSecurityFilterFieldId}\n                            className={styles.chatSettingsSeparator}\n                            checked={useOidSecurityFilter || requireAccessControl}\n                            label=\"Use oid security filter\"\n                            disabled={!loggedIn || requireAccessControl}\n                            onChange={onUseOidSecurityFilterChange}\n                            aria-labelledby={useOidSecurityFilterId}\n                            onRenderLabel={(props: ICheckboxProps | undefined) => (\n                                <HelpCallout\n                                    labelId={useOidSecurityFilterId}\n                                    fieldId={useOidSecurityFilterFieldId}\n                                    helpText={toolTipText.useOidSecurityFilter}\n                                    label={props?.label}\n                                />\n                            )}\n                        />\n                        <Checkbox\n                            id={useGroupsSecurityFilterFieldId}\n                            className={styles.chatSettingsSeparator}\n                            checked={useGroupsSecurityFilter || requireAccessControl}\n                            label=\"Use groups security filter\"\n                            disabled={!loggedIn || requireAccessControl}\n                            onChange={onUseGroupsSecurityFilterChange}\n                            aria-labelledby={useGroupsSecurityFilterId}\n                            onRenderLabel={(props: ICheckboxProps | undefined) => (\n                                <HelpCallout\n                                    labelId={useGroupsSecurityFilterId}\n                                    fieldId={useGroupsSecurityFilterFieldId}\n                                    helpText={toolTipText.useGroupsSecurityFilter}\n                                    label={props?.label}\n                                />\n                            )}\n                        />\n                    </>\n                )}\n                {useLogin && <TokenClaimsDisplay />}\n            </Panel>\n        </div>\n    );\n}\n\nComponent.displayName = \"Ask\";\n"],"names":["Component","isConfigPanelOpen","setIsConfigPanelOpen","useState","promptTemplate","setPromptTemplate","promptTemplatePrefix","setPromptTemplatePrefix","promptTemplateSuffix","setPromptTemplateSuffix","temperature","setTemperature","seed","setSeed","minimumRerankerScore","setMinimumRerankerScore","minimumSearchScore","setMinimumSearchScore","retrievalMode","setRetrievalMode","RetrievalMode","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","useGPT4V","setUseGPT4V","gpt4vInput","setGPT4VInput","GPT4VInput","excludeCategory","setExcludeCategory","question","setQuestion","vectorFieldList","setVectorFieldList","VectorFieldOptions","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","showGPT4VOptions","setShowGPT4VOptions","showSemanticRankerOption","setShowSemanticRankerOption","showVectorOption","setShowVectorOption","showUserUpload","setShowUserUpload","showSpeechInput","setShowSpeechInput","showSpeechOutputBrowser","setShowSpeechOutputBrowser","showSpeechOutputAzure","setShowSpeechOutputAzure","lastQuestionRef","useRef","isLoading","setIsLoading","error","setError","answer","setAnswer","speechUrl","setSpeechUrl","activeCitation","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","client","useLogin","useMsal","loggedIn","useContext","LoginContext","getConfig","configApi","config","useEffect","getSpeechApi","makeApiRequest","token","getToken","request","result","askApi","e","onPromptTemplateChange","_ev","newValue","onTemperatureChange","onSeedChange","onMinimumSearchScoreChange","onMinimumRerankerScoreChange","onRetrieveCountChange","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onExcludeCategoryChanged","onExampleClicked","example","onShowCitation","citation","AnalysisPanelTabs","onToggleTab","tab","onUseOidSecurityFilterChange","onUseGroupsSecurityFilterChange","promptTemplateId","useId","promptTemplateFieldId","temperatureId","temperatureFieldId","seedId","seedFieldId","searchScoreId","searchScoreFieldId","rerankerScoreId","rerankerScoreFieldId","retrieveCountId","retrieveCountFieldId","excludeCategoryId","excludeCategoryFieldId","semanticRankerId","semanticRankerFieldId","semanticCaptionsId","semanticCaptionsFieldId","useOidSecurityFilterId","useOidSecurityFilterFieldId","useGroupsSecurityFilterId","useGroupsSecurityFilterFieldId","jsxs","styles","UploadFile","jsx","SettingsButton","QuestionInput","Spinner","ExampleList","Answer","x","AnswerError","AnalysisPanel","Panel","DefaultButton","TextField","props","HelpCallout","toolTipText","Fragment","Checkbox","GPT4VSettings","inputs","VectorSettings","options","requireAccessControl","TokenClaimsDisplay"],"mappings":"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"}